# Modernized release workflow with semantic-release auto-tagging
name: RELEASE

on:
  push:
    branches: [main]
    paths:
      - "aiagents4pharma/**"
      - "pyproject.toml"
      - "uv.lock"
  workflow_dispatch:

jobs:
  release:
    name: Release & Publish
    permissions:
      contents: write
      issues: write
      pull-requests: write
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install uv
        uses: astral-sh/setup-uv@v4

      - name: Set up Python
        run: uv python install 3.12

      - name: Set up Node.js for semantic-release
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"

      - name: Install semantic-release
        run: npm install

      - name: Install dependencies
        run: uv sync --frozen --extra dev

      - name: Run quality checks
        run: |
          uv run ruff check aiagents4pharma/
          uv run bandit -c pyproject.toml -r aiagents4pharma/

      - name: Run semantic-release (creates tag automatically)
        run: npx semantic-release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Get release version and checkout tag
        run: |
          RELEASE_VERSION=$(git describe --tags --abbrev=0)
          echo "RELEASE_VERSION=$RELEASE_VERSION" >> $GITHUB_ENV
          echo "Release version: $RELEASE_VERSION"

          # Fetch the tag and checkout exactly on it
          git fetch origin tag $RELEASE_VERSION --no-tags
          git checkout $RELEASE_VERSION

          # Verify we're on the exact tag
          echo "Current commit: $(git rev-parse HEAD)"
          echo "Tag commit: $(git rev-list -n 1 $RELEASE_VERSION)"
          git describe --exact-match --tags HEAD || echo "Warning: Not on exact tag"

      - name: Build package with uv
        run: |
          # Clean any previous builds
          rm -rf dist/ build/ *.egg-info/

          # Show git status for debugging
          echo "=== Git Status ==="
          git status
          echo "=== Current Tag ==="
          git describe --exact-match --tags HEAD 2>/dev/null || echo "Not on exact tag"
          echo "=== Building ==="

          # Try building - if version is still wrong, we'll override it
          uv build

          # Check if we got a clean version
          BUILT_VERSION=$(find dist -name "*.whl" | head -1 | sed -n 's/.*-\([0-9][^-]*\)-.*/\1/p')
          echo "Built version: $BUILT_VERSION"

          if [[ "$BUILT_VERSION" == *"dev"* ]] || [[ "$BUILT_VERSION" == *"+"* ]]; then
            echo "WARNING: Built version contains dev/local identifiers. Rebuilding with explicit version."
            rm -rf dist/ build/ *.egg-info/

            # Set explicit version and rebuild
            CLEAN_VERSION=${RELEASE_VERSION#v}  # Remove 'v' prefix
            echo "Building with explicit version: $CLEAN_VERSION"
            HATCH_VERSION=$CLEAN_VERSION uv build
          fi

      - name: Verify package integrity
        run: |
          uv run twine check dist/*

      - name: Test package installation
        run: |
          # Test that the built package can be installed in a virtual environment
          uv venv test-env
          uv pip install --python test-env dist/*.whl --dry-run

      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          user: __token__
          password: ${{ secrets.PYPI_API_TOKEN }}
          verify-metadata: true
          verbose: true
          skip-existing: true

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          files: dist/*
          tag_name: ${{ env.RELEASE_VERSION }}
          generate_release_notes: true
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Comment on merged PRs
        uses: actions/github-script@v7
        with:
          script: |
            const version = process.env.RELEASE_VERSION;
            const releaseUrl = 'https://github.com/' + context.repo.owner + '/' + context.repo.repo + '/releases/tag/' + version;

            const { data: releases } = await github.rest.repos.listReleases({
              owner: context.repo.owner,
              repo: context.repo.repo,
              per_page: 10
            });

            const previousRelease = releases.find(r => r.tag_name !== version);
            const previousDate = previousRelease ? previousRelease.published_at : '1970-01-01T00:00:00Z';

            // Get only the latest commit (the merge commit)
            const { data: commits } = await github.rest.repos.listCommits({
              owner: context.repo.owner,
              repo: context.repo.repo,
              per_page: 1
            });

            const prNumbers = new Set();
            if (commits.length > 0) {
              try {
                const { data: prs } = await github.rest.repos.listPullRequestsAssociatedWithCommit({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  commit_sha: commits[0].sha
                });
                prs.forEach(pr => {
                  if (pr.state === 'closed' && pr.merged_at) {
                    prNumbers.add(pr.number);
                  }
                });
              } catch (error) {
                console.log('Could not get PRs for latest commit: ' + error.message);
              }
            }

            for (const prNumber of prNumbers) {
              try {
                const commentLines = [
                  '🎉 **This pull request has been included in [' + version + '](' + releaseUrl + ')!**',
                  '',
                  'Thanks for your contribution!',
                  '',
                  '📦 **The release includes:**',
                  '- 🐍 Python package: pip install aiagents4pharma==' + version.replace('v', ''),
                  '- 🐳 Docker images: vpatientengine/talk2aiagents4pharma:' + version,
                  '- 📋 Docker Compose configurations available in the release assets',
                  '',
                  '---',
                  '*🤖 This comment was automatically generated by the release workflow*'
                ];
                const commentBody = commentLines.join('\n');

                await github.rest.issues.createComment({ owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: prNumber,
                  body: commentBody
                });

                console.log('Commented on PR #' + prNumber);
              } catch (error) {
                console.log('Failed to comment on PR #' + prNumber + ': ' + error.message);
              }
            }

            console.log('Release ' + version + ' completed! Commented on ' + prNumbers.size + ' PRs.');
        env:
          RELEASE_VERSION: ${{ env.RELEASE_VERSION }}
